openapi: 3.0.3
info:
  title: Blogs API - OpenAPI 3.0
  version: 1.0.0
  description: >-
    Este projeto trata-se de uma API e um banco de dados para a produ√ß√£o de
    conte√∫do para um blog!
    
    
    Alguns links √∫teis:
    
    - [Repositorio Blogs API](https://github.com/Andreyrvs/26-blogs-api)

  contact:
    email: cortaesai@gmail.com
    name: Andrey
    url: https://www.linkedin.com/in/andreyrv/
    
servers:
  - url: http://localhost:3000/
  - url: https://26-blogs-api-production.up.railway.app/
tags:
  - name: health
    description: Sa√∫de da API
  - name: login
    description: Login da Aplica√ß√£o
  - name: user
    description: Tudo sobre os usu√°rios
  - name: categories
    description: Tudo sobre categoria dos posts
paths:
  /health:
    get:
      tags:
        - health
      summary: Status da API
      description: Retorna um objeto com dados de tempo"
      responses:
        '200':
          description: Opera√ß√£o bem sucedida
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Health'
  
  /login:
    post:
      tags:
        - login
      summary: Loga o usu√°rio na aplica√ß√£o.
      description: Somente usu√°rios que foram criados podem fazer login
      requestBody:
        description: Insira o Usu√°rio com respectivos dados
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
      responses:
        '200':
          description: |-
            Utilize Esse Token no Bot√£o acima `Authorize üîì`
            Sera utilizado para fazer Login na Aplica√ß√£o.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '500':
          description: Algo deu errado
  
  /user:
    post:
      tags:
        - user
      summary: Loga o palestrante no sistema.
      description: O endpoint √© capaz de adicionar um novo `user` a sua tabela no banco de dados;   
      security:
        - basicAuth: []
      requestBody:
        $ref: '#/components/requestBodies/NewUser'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '500':
          description: Algo deu errado
    
    get:
      tags:
        - user
      summary: Todos usu√°rios
      description: ''  
      security:
        - basicAuth: []
      responses:
        '200':
          description: Array de objetos com dados dos usuarios.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NewUser'
        '404': 
          description: User Not Found
        '500':
          description: Algo deu errado

components:
  schemas:
    Health:
      type: object
      properties:
        uptime:
          type: integer
          example: 7.076872259
        message:
          type: string
          example: OK
        timestamp:
          type: string
          example: 2023-03-03T23:31:51.184Z
    
    Token:
      type: object
      properties:
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6MSwiaWF0IjoxNjc4MzE4NDYyLCJleHAiOjE2NzgzMjE3NjJ9.g8OPS2k9v4V0Rd_fyaa1WWPdoZzfAgmGuklmN3cNHRQ
    
    Login:
      required: 
        - email
        - password
      type: object
      properties:
        email:
          type: string
          example: lewishamilton@gmail.com
        password:
          type: string
          example: 123456
    
    NewUser:
      type: object
      required:
        - displayName
        - email
        - password
        - image
      properties:
        displayName:
          type: string
          example: Andrey RV
        email:
          type: string
          example: andreyemail@email.com
        password:
          type: string
          example: UmaSenhaMuitoForte
        image:
          type: string
          example: https://s.gravatar.com/avatar/410d19346c5917f390ea5131fd45c4eb?s=80

    GetUser:
      type: object
      properties:
        id:
          type: integer
          example: 1
        displayName:
          type: string
          example: Lewis Hamilton
        email:
          type: string
          example: lewishamilton@gmail.com
        image:
          type: string
          example: https://upload.wikimedia.org/wikipedia/commons/1/18/Lewis_Hamilton_2016_Malaysia_2.jpg
  
  
  requestBodies:
    NewUser:
      description: Use o objeto com **email** e **senha**.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NewUser'
      required: true

  securitySchemes:
    basicAuth:
      type: apiKey
      name: Authorization
      in: header
      description: Token para fazer login
